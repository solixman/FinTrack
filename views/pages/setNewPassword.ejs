<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Set New Password - FinSolutions</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB" crossorigin="anonymous">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #e8ecf1 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
            max-width: 480px;
            width: 100%;
            padding: 48px 40px;
        }

        .icon-wrapper {
            width: 64px;
            height: 64px;
            background: linear-gradient(135deg, #0d9488 0%, #14b8a6 100%);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 24px;
        }

        .icon-wrapper svg {
            width: 32px;
            height: 32px;
            color: white;
        }

        h1 {
            font-size: 28px;
            font-weight: 700;
            color: #1e293b;
            text-align: center;
            margin-bottom: 12px;
        }

        .subtitle {
            color: #64748b;
            text-align: center;
            margin-bottom: 32px;
            font-size: 15px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        label {
            display: block;
            font-weight: 500;
            color: #334155;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .password-wrapper {
            position: relative;
        }

        input[type="password"],
        input[type="text"] {
            width: 100%;
            padding: 12px 44px 12px 16px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 15px;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
            background: #f8fafc;
        }

        input:focus {
            outline: none;
            border-color: #0d9488;
            background: white;
            box-shadow: 0 0 0 3px rgba(13, 148, 136, 0.1);
        }

        input.error {
            border-color: #ef4444;
        }

        input.success {
            border-color: #10b981;
        }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px;
            color: #64748b;
            transition: color 0.2s;
        }

        .toggle-password:hover {
            color: #0d9488;
        }

        .toggle-password svg {
            width: 20px;
            height: 20px;
        }

        .requirements {
            background: #f8fafc;
            border-radius: 10px;
            padding: 16px;
            margin-top: 16px;
        }

        .requirements-title {
            font-size: 13px;
            font-weight: 600;
            color: #334155;
            margin-bottom: 12px;
        }

        .requirement {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 13px;
            color: #64748b;
            margin-bottom: 8px;
            transition: color 0.2s;
        }

        .requirement:last-child {
            margin-bottom: 0;
        }

        .requirement.met {
            color: #10b981;
        }

        .requirement-icon {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 2px solid #cbd5e1;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            transition: all 0.2s;
        }

        .requirement.met .requirement-icon {
            background: #10b981;
            border-color: #10b981;
        }

        .requirement.met .requirement-icon::after {
            content: 'âœ“';
            color: white;
            font-size: 10px;
            font-weight: bold;
        }

        .error-message {
            color: #ef4444;
            font-size: 13px;
            margin-top: 8px;
            display: none;
        }

        .error-message.show {
            display: block;
        }

        .submit-btn {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #0d9488 0%, #14b8a6 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 8px;
            font-family: 'Inter', sans-serif;
        }

        .submit-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(13, 148, 136, 0.3);
        }

        .submit-btn:active:not(:disabled) {
            transform: translateY(0);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .submit-btn.loading {
            position: relative;
            color: transparent;
        }

        .submit-btn.loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .back-link {
            text-align: center;
            margin-top: 24px;
        }

        .back-link a {
            color: #0d9488;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: color 0.2s;
        }

        .back-link a:hover {
            color: #0f766e;
            text-decoration: underline;
        }

        @media (max-width: 640px) {
            .container {
                padding: 32px 24px;
            }

            h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="icon-wrapper">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
            </svg>
        </div>

        <h1>Set New Password</h1>
        <p class="subtitle">Create a strong password to secure your account</p>

        <form id="setPasswordForm" action="/set-password" method="POST">
            <div class="form-group">
                <label for="password">New Password</label>
                <div class="password-wrapper">
                    <input 
                        type="password" 
                        id="password" 
                        name="password" 
                        required
                        autocomplete="new-password"
                    >
                    <button type="button" class="toggle-password" data-target="password">
                        <svg class="eye-open" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                        <svg class="eye-closed" style="display: none;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                    </button>
                </div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <div class="password-wrapper">
                    <input 
                        type="password" 
                        id="confirmPassword" 
                        name="confirmPassword" 
                        required
                        autocomplete="new-password"
                    >
                    <button type="button" class="toggle-password" data-target="confirmPassword">
                        <svg class="eye-open" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                        </svg>
                        <svg class="eye-closed" style="display: none;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"/>
                        </svg>
                    </button>
                </div>
                <div class="error-message" id="matchError">Passwords do not match</div>
            </div>

            <div class="requirements">
                <div class="requirements-title">Password Requirements:</div>
                <div class="requirement" data-requirement="length">
                    <div class="requirement-icon"></div>
                    <span>At least 8 characters</span>
                </div>
                <div class="requirement" data-requirement="uppercase">
                    <div class="requirement-icon"></div>
                    <span>One uppercase letter</span>
                </div>
                <div class="requirement" data-requirement="lowercase">
                    <div class="requirement-icon"></div>
                    <span>One lowercase letter</span>
                </div>
                <div class="requirement" data-requirement="number">
                    <div class="requirement-icon"></div>
                    <span>One number</span>
                </div>
                <div class="requirement" data-requirement="special">
                    <div class="requirement-icon"></div>
                    <span>One special character (!@#$%^&*)</span>
                </div>
            </div>

            <button type="submit" class="submit-btn" id="submitBtn" disabled>
                Set New Password
            </button>
        </form>

        <div class="back-link">
            <a href="/">Back to Home</a>
        </div>
    </div>

    <script>
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirmPassword');
        const submitBtn = document.getElementById('submitBtn');
        const matchError = document.getElementById('matchError');
        const form = document.getElementById('setPasswordForm');

        const requirements = {
            length: (password) => password.length >= 8,
            uppercase: (password) => /[A-Z]/.test(password),
            lowercase: (password) => /[a-z]/.test(password),
            number: (password) => /[0-9]/.test(password),
            special: (password) => /[!@#$%^&*(),.?":{}|<>]/.test(password)
        };

        function validatePassword() {
            const password = passwordInput.value;
            let allMet = true;

            Object.keys(requirements).forEach(req => {
                const element = document.querySelector(`[data-requirement="${req}"]`);
                const isMet = requirements[req](password);
                
                if (isMet) {
                    element.classList.add('met');
                } else {
                    element.classList.remove('met');
                    allMet = false;
                }
            });

            return allMet;
        }

        function validateMatch() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (confirmPassword && password !== confirmPassword) {
                confirmPasswordInput.classList.add('error');
                confirmPasswordInput.classList.remove('success');
                matchError.classList.add('show');
                return false;
            } else if (confirmPassword && password === confirmPassword) {
                confirmPasswordInput.classList.remove('error');
                confirmPasswordInput.classList.add('success');
                matchError.classList.remove('show');
                return true;
            } else {
                confirmPasswordInput.classList.remove('error', 'success');
                matchError.classList.remove('show');
                return false;
            }
        }

        function updateSubmitButton() {
            const passwordValid = validatePassword();
            const matchValid = validateMatch();
            const confirmPasswordFilled = confirmPasswordInput.value.length > 0;

            if (passwordValid && matchValid && confirmPasswordFilled) {
                submitBtn.disabled = false;
                passwordInput.classList.add('success');
                passwordInput.classList.remove('error');
            } else {
                submitBtn.disabled = true;
                if (passwordInput.value) {
                    passwordInput.classList.add('error');
                    passwordInput.classList.remove('success');
                }
            }
        }

        passwordInput.addEventListener('input', updateSubmitButton);
        confirmPasswordInput.addEventListener('input', updateSubmitButton);

        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                const eyeOpen = this.querySelector('.eye-open');
                const eyeClosed = this.querySelector('.eye-closed');

                if (input.type === 'password') {
                    input.type = 'text';
                    eyeOpen.style.display = 'none';
                    eyeClosed.style.display = 'block';
                } else {
                    input.type = 'password';
                    eyeOpen.style.display = 'block';
                    eyeClosed.style.display = 'none';
                }
            });
        });

        // Form submission
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!submitBtn.disabled) {
                submitBtn.classList.add('loading');
                submitBtn.disabled = true;

                // Simulate form submission - your backend will handle this
                setTimeout(() => {
                    form.submit();
                }, 500);
            }
        });
    </script>
</body>
</html>
